---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Values.applicationName }}
  labels:
    {{- include "backstage.labels" . | nindent 4 }}
    {{- include "frontend.labels" . | nindent 4 }}
spec:
  strategy:
    type: {{ .Values.deploymentStrategy.type }}
    {{- if eq .Values.deploymentStrategy.type "RollingUpdate" }}
    {{- with .Values.deploymentStrategy }}
    rollingUpdate:
      maxSurge: {{ .rollingMaxSurge }}
      maxUnavailable: {{ .rollingMaxUnavailable }}
    {{- end }}
    {{- end }}
    {{- if eq .Values.deploymentStrategy.type "Recreate" }}
    recreateParams:
      timeoutSeconds: {{ .Values.deploymentStrategy.timeout }}
    {{- end }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "frontend.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "backstage.labels" . | nindent 8 }}
        {{- include "frontend.selectorLabels" . | nindent 8 }}
    spec:
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriod | default 60 }}
      serviceAccountName: {{ include "frontend.serviceAccountName" . }}
      containers:
      - name: {{ .Values.applicationName }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: {{ .Values.port }}
          protocol: TCP
        {{- with .Values.env }}
        env:
          {{- toYaml . | nindent 12 }}
        {{- end }}
        resources: {{ if not .Values.limits}}{}{{end}}
          {{- if .Values.limits }}
          limits:
            cpu: {{ .Values.limits.cpu }}
            memory: {{ .Values.limits.memory }}
          {{- end }}
          {{- if .Values.requests }}
          requests:
            cpu: {{ .Values.requests.cpu }}
            memory: {{ .Values.requests.memory }}
          {{- end }}
        {{- with .Values.health }}
        readinessProbe:
          httpGet:
            path: {{ .readinessEndpoint }}
            port: {{ $.Values.port }}
          initialDelaySeconds: {{ .probeDelay }}
          timeoutSeconds: {{ .probeTimeout }}
        livenessProbe:
          httpGet:
            path: {{ .livenessEndpoint }}
            port: {{ $.Values.port }}
          periodSeconds: {{ .probePeriod }}
          initialDelaySeconds: {{ .probeDelay }}
          timeoutSeconds: {{ .probeTimeout }}
        {{- end }}
        volumeMounts:
        - name: {{ .Values.applicationName }}-nginx-volume
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
        - name: {{ .Values.applicationName }}-nginx-volume
          configMap:
            name: {{ .Values.applicationName }}-nginx-config
