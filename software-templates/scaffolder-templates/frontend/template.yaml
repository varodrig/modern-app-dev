apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: app-frontend-template
  title: Frontend Application
  description: creates the frontend app for the workshop
  tags:
    - npm
    - frontend
    - workshop
spec:
  owner: dev-mad
  type: service

  parameters:
    - title: Provide information about the GitLab location
      required:
        - group
        - host
      properties:
        host:
          title: Repo Host
          type: string
          description: Your SCM host
          default: gitlab-gitlab.apps.cluster-xxxxx.xxxxx.sandboxXXX.opentlc.com
        group:
          title: Repo Group
          type: string
          description: Your SCM host organization/group
          default: rhdhub
    - title: Provide information about the new component
      required:
        - cluster_id
        - namespace
        - owner
      properties:
        cluster_id:
          title: Cluster Id
          type: string
          description: Id of the cluster
          default: .apps.cluster-xxxxx.xxxxx.sandboxxx.opentlc.com
        namespace: 
          title: Namespace
          type: string
          description: Namespace
          default: rhdhub-userN
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind: [User]
    - title: Provide Build Information
      required:
        - image_host
        - image_tag
        - component_id
      properties:
        image_host:
          title: Image Host
          type: string
          description: Host for storing image (defaults to openshift internal)
          default: image-registry.openshift-image-registry.svc:5000
        image_tag:
          title: Image Tag
          default: latest
          type: string
          description: Image tag to use for storing in the internal registry
        component_id:
          title: Component ID
          default: frontend-app-userN
          type: string
          description: Comp Id
  steps:
    - id: templateSource
      name: Generating the source code component
      action: fetch:template
      input:
        url: ./skeleton
        targetPath: ./source
        values:
          group: ${{parameters.group}}
          owner: ${{parameters.owner}}
          cluster_id: ${{parameters.cluster_id}}
          namespace: ${{parameters.namespace}}
          component_id: ${{parameters.component_id}}
          host: ${{ parameters.host }}
          repoName: ${{parameters.component_id}}
    - id: publishSource
      name: Publishing to Source Code Repository
      action: publish:gitlab
      input:
        sourcePath: ./source
        description: ${{parameters.description}}
        repoUrl: ${{ parameters.host }}?owner=${{ parameters.group }}&repo=${{parameters.component_id}}
        defaultBranch: main
        protectDefaultBranch: false
        repoVisibility: public    
    - id: registerSource
      name: Registering the Source Code Component
      action: catalog:register
      input:
        repoContentsUrl: ${{steps.publishSource.output.repoContentsUrl}}
        catalogInfoPath: /catalog-info.yaml
    - id: templateGitops
      name: Generating the deployment resources and artefacts
      action: fetch:template
      input:
        url: ./manifests
        copyWithoutTemplating: []
        values:
          component_id: ${{parameters.component_id}}
          description: ${{parameters.description}}
          destination:  https://${{ parameters.host }}/${{ parameters.group }}/${{parameters.component_id}}-gitops.git
          source_repository: https://${{ parameters.host }}/${{ parameters.group }}/${{parameters.component_id}}.git
          repository_name: ${{parameters.component_id}}
          cluster: ${{parameters.cluster_id}}
          namespace: ${{parameters.namespace}}
          image_host: ${{parameters.image_host}}/${{parameters.namespace}}
          image_name: ${{parameters.component_id}}
          image_tag: ${{parameters.image_tag}}
        targetPath: ./tenant-gitops
    - id: publishGitops
      name: Publishing to Deployment Resource Repository
      action: publish:gitlab
      input:
        repoUrl: ${{ parameters.host }}?owner=${{ parameters.group }}&repo=${{parameters.component_id}}-gitops
        title: gitops resources for ${{parameters.namespace}}-gitops
        description: gitops resources for ${{parameters.namespace}}-gitops
        sourcePath: ./tenant-gitops
        defaultBranch: main
        protectDefaultBranch: false
        repoVisibility: public
    - id: createArgoResources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        appName: ${{parameters.component_id}}-gitops
        argoInstance: main
        namespace: rhdhub
        repoUrl: https://${{ parameters.host }}/${{ parameters.group }}/${{parameters.component_id}}-gitops.git
        path: 'argocd/'
  output:
    links:
      - title: Source Code Repository
        url: ${{steps.publishSource.output.remoteUrl}}
      - title: Pipeline status
        url: https://console-openshift-console${{parameters.cluster_id}}/dev-pipelines/ns/${{parameters.namespace}}/
      - title: Open Component in catalog
        icon: catalog
        entityRef: ${{steps.registerSource.output.entityRef}}
